# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

jobs:
# - job: build
#   displayName: build the app
#   pool:
#     vmImage: 'ubuntu-latest'
#   steps:
#   - task: UsePythonVersion@0
#     inputs:
#       versionSpec: '3.8.3'
#       addToPath: true
#       architecture: 'x64'
#   - script: |
#       python -m venv buildenv
#       source buildenv/bin/activate
#       python -m pip install --upgrade pip
#       pip install setup
#       pip install -r requirements.txt
#     displayName: 'Install requirements'
#   - task: ArchiveFiles@2
#     inputs:
#       rootFolderOrFile: '$(Build.SourcesDirectory)'
#       includeRootFolder: false
#       archiveType: 'zip'
#       archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#       replaceExistingArchive: true
#   - publish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
#     artifact: campusmap

  # track deployments on the environment
- deployment: DeployWeb
  displayName: deploy campusmap
  pool:
    vmImage: 'Ubuntu-18.04'
  # creates an environment if it doesn't exist
  environment: 
    name: 'campusmap_dev'
    resourceType: VirtualMachine
    tags: dev
  strategy:
    # default deployment strategy, more coming...
    runOnce:
      deploy:
        steps:
        - checkout: self
          persistCredentials: true
          clean: true
        - script: |
            git -c http.extraheader="AUTHORIZATION: bearer $(System.AccessToken)" pull
            python manage.py collectstatic --noinput
            sudo systemctl restart gunicorn.service
            sudo service nginx restart
          workingDirectory: /home/campus/campusmap
